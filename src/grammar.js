// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

	const lexer = require('./lexer.js');
	const util = require('util');
var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "ROOT$subexpression$1$ebnf$1", "symbols": []},
    {"name": "ROOT$subexpression$1$ebnf$1$subexpression$1", "symbols": ["IMPORT", "_"]},
    {"name": "ROOT$subexpression$1$ebnf$1", "symbols": ["ROOT$subexpression$1$ebnf$1", "ROOT$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ROOT$subexpression$1$ebnf$2", "symbols": []},
    {"name": "ROOT$subexpression$1$ebnf$2$subexpression$1", "symbols": ["STATEMENT", "_"]},
    {"name": "ROOT$subexpression$1$ebnf$2", "symbols": ["ROOT$subexpression$1$ebnf$2", "ROOT$subexpression$1$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ROOT$subexpression$1", "symbols": ["_", "ROOT$subexpression$1$ebnf$1", "ROOT$subexpression$1$ebnf$2", "_"]},
    {"name": "ROOT", "symbols": ["ROOT$subexpression$1"], "postprocess":  (args) => {
        	return {
        		type: 'statment',
        		value: [
        			...args[0][1].map((value) => {
        				return value[0];
        			}),
        			...args[0][2].map((value) => {
        				return value[0];
        			}),
        		],
        	}
        } },
    {"name": "IMPORT_NAME$ebnf$1$subexpression$1", "symbols": ["_", {"literal":"as"}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "IMPORT_NAME$ebnf$1", "symbols": ["IMPORT_NAME$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IMPORT_NAME$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IMPORT_NAME", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier), "IMPORT_NAME$ebnf$1"]},
    {"name": "IMPORT_MAP$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "IMPORT_MAP$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "IMPORT_NAME"]},
    {"name": "IMPORT_MAP$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IMPORT_MAP$ebnf$1$subexpression$1$ebnf$1", "IMPORT_MAP$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "IMPORT_MAP$ebnf$1$subexpression$1", "symbols": ["_", "IMPORT_NAME", "IMPORT_MAP$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IMPORT_MAP$ebnf$1", "symbols": ["IMPORT_MAP$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IMPORT_MAP$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IMPORT_MAP", "symbols": [{"literal":"{"}, "IMPORT_MAP$ebnf$1", "_", {"literal":"}"}]},
    {"name": "IMPORT$subexpression$1", "symbols": ["IMPORT_NAME"]},
    {"name": "IMPORT$subexpression$1", "symbols": ["IMPORT_MAP"]},
    {"name": "IMPORT$subexpression$1$subexpression$1", "symbols": ["IMPORT_NAME", "_", {"literal":","}, "_", "IMPORT_MAP"]},
    {"name": "IMPORT$subexpression$1", "symbols": ["IMPORT$subexpression$1$subexpression$1"]},
    {"name": "IMPORT", "symbols": [{"literal":"import"}, "_", "IMPORT$subexpression$1", "_", {"literal":"from"}, "_", (lexer.has("string") ? {type: "string"} : string), "_", "BREAK"]},
    {"name": "BLOCK", "symbols": ["ENUM_DECLARATION"]},
    {"name": "BLOCK", "symbols": ["STRUCTURE_DECLARATION"]},
    {"name": "BLOCK", "symbols": ["FUNCTION_DECLARATION"]},
    {"name": "BLOCK", "symbols": ["COMPONENT_DECLARATION"]},
    {"name": "BLOCK", "symbols": ["STATEMENT"]},
    {"name": "BLOCK", "symbols": ["EXPORT"]},
    {"name": "EXPORT$ebnf$1$subexpression$1", "symbols": ["_", {"literal":"default"}]},
    {"name": "EXPORT$ebnf$1", "symbols": ["EXPORT$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "EXPORT$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "EXPORT", "symbols": [{"literal":"export"}, "EXPORT$ebnf$1", "BLOCK"]},
    {"name": "DECLARATION", "symbols": ["ENUM_DECLARATION"]},
    {"name": "DECLARATION", "symbols": ["VALUE_DECLARATION"]},
    {"name": "DECLARATION", "symbols": ["STRUCTURE_DECLARATION"]},
    {"name": "DECLARATION", "symbols": ["FUNCTION_DECLARATION"]},
    {"name": "DECLARATION", "symbols": ["COMPONENT_DECLARATION"]},
    {"name": "ENUM_VALUES$ebnf$1", "symbols": []},
    {"name": "ENUM_VALUES$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "ENUM_VALUES$ebnf$1", "symbols": ["ENUM_VALUES$ebnf$1", "ENUM_VALUES$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ENUM_VALUES", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier), "ENUM_VALUES$ebnf$1", "BREAK"]},
    {"name": "ENUM_DECLARATION$ebnf$1$subexpression$1", "symbols": ["_", "ENUM_VALUES"]},
    {"name": "ENUM_DECLARATION$ebnf$1", "symbols": ["ENUM_DECLARATION$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ENUM_DECLARATION$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ENUM_DECLARATION$ebnf$2", "symbols": []},
    {"name": "ENUM_DECLARATION$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": [(lexer.has("access") ? {type: "access"} : access), "_"]},
    {"name": "ENUM_DECLARATION$ebnf$2$subexpression$1$ebnf$1", "symbols": ["ENUM_DECLARATION$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ENUM_DECLARATION$ebnf$2$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ENUM_DECLARATION$ebnf$2$subexpression$1", "symbols": ["_", "ENUM_DECLARATION$ebnf$2$subexpression$1$ebnf$1", "DECLARATION"]},
    {"name": "ENUM_DECLARATION$ebnf$2", "symbols": ["ENUM_DECLARATION$ebnf$2", "ENUM_DECLARATION$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ENUM_DECLARATION", "symbols": [{"literal":"enum"}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier), "_", {"literal":"{"}, "ENUM_DECLARATION$ebnf$1", "ENUM_DECLARATION$ebnf$2", "_", {"literal":"}"}]},
    {"name": "STRUCTURE_VALUE_DECLARATION$ebnf$1$subexpression$1", "symbols": [(lexer.has("access") ? {type: "access"} : access), "_"]},
    {"name": "STRUCTURE_VALUE_DECLARATION$ebnf$1", "symbols": ["STRUCTURE_VALUE_DECLARATION$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "STRUCTURE_VALUE_DECLARATION$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "STRUCTURE_VALUE_DECLARATION$ebnf$2$subexpression$1", "symbols": [{"literal":"static"}, "_"]},
    {"name": "STRUCTURE_VALUE_DECLARATION$ebnf$2", "symbols": ["STRUCTURE_VALUE_DECLARATION$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "STRUCTURE_VALUE_DECLARATION$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "STRUCTURE_VALUE_DECLARATION", "symbols": ["STRUCTURE_VALUE_DECLARATION$ebnf$1", "STRUCTURE_VALUE_DECLARATION$ebnf$2", "DECLARATION"]},
    {"name": "STRUCTURE_DECLARATION$subexpression$1$ebnf$1", "symbols": []},
    {"name": "STRUCTURE_DECLARATION$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "TYPE"]},
    {"name": "STRUCTURE_DECLARATION$subexpression$1$ebnf$1", "symbols": ["STRUCTURE_DECLARATION$subexpression$1$ebnf$1", "STRUCTURE_DECLARATION$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "STRUCTURE_DECLARATION$subexpression$1", "symbols": ["_", {"literal":"extends"}, "_", "TYPE", "STRUCTURE_DECLARATION$subexpression$1$ebnf$1"]},
    {"name": "STRUCTURE_DECLARATION$ebnf$1", "symbols": []},
    {"name": "STRUCTURE_DECLARATION$ebnf$1$subexpression$1", "symbols": ["_", "STRUCTURE_VALUE_DECLARATION"]},
    {"name": "STRUCTURE_DECLARATION$ebnf$1", "symbols": ["STRUCTURE_DECLARATION$ebnf$1", "STRUCTURE_DECLARATION$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "STRUCTURE_DECLARATION", "symbols": [{"literal":"struct"}, "_", "TYPE_DECLARATION", "STRUCTURE_DECLARATION$subexpression$1", "_", {"literal":"{"}, "STRUCTURE_DECLARATION$ebnf$1", "_", {"literal":"}"}]},
    {"name": "FUNCTION_ARGUMENT$ebnf$1$subexpression$1", "symbols": ["TYPE", "_"]},
    {"name": "FUNCTION_ARGUMENT$ebnf$1", "symbols": ["FUNCTION_ARGUMENT$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "FUNCTION_ARGUMENT$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "FUNCTION_ARGUMENT", "symbols": ["FUNCTION_ARGUMENT$ebnf$1", "ASSIGNMENT_IDENTIFIER"]},
    {"name": "FUNCTION_ARGUMENTS$ebnf$1", "symbols": ["FUNCTION_ARGUMENT"], "postprocess": id},
    {"name": "FUNCTION_ARGUMENTS$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "FUNCTION_ARGUMENTS$ebnf$2", "symbols": []},
    {"name": "FUNCTION_ARGUMENTS$ebnf$2$subexpression$1", "symbols": ["_", {"literal":","}, "_", "FUNCTION_ARGUMENT"]},
    {"name": "FUNCTION_ARGUMENTS$ebnf$2", "symbols": ["FUNCTION_ARGUMENTS$ebnf$2", "FUNCTION_ARGUMENTS$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "FUNCTION_ARGUMENTS", "symbols": ["FUNCTION_ARGUMENTS$ebnf$1", "FUNCTION_ARGUMENTS$ebnf$2"]},
    {"name": "FUNCTION_DECLARATION$subexpression$1", "symbols": [{"literal":"function"}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier), {"literal":"("}, "_", "FUNCTION_ARGUMENTS", "_", {"literal":")"}]},
    {"name": "FUNCTION_DECLARATION", "symbols": ["FUNCTION_DECLARATION$subexpression$1"]},
    {"name": "FUNCTION_DECLARATION$subexpression$2", "symbols": [{"literal":"("}, "_", "FUNCTION_ARGUMENTS", "_", {"literal":")"}, "_", {"literal":"=>"}]},
    {"name": "FUNCTION_DECLARATION", "symbols": ["FUNCTION_DECLARATION$subexpression$2", "_", {"literal":"{"}, "STATEMENT", {"literal":"}"}]},
    {"name": "COMPONENT_DECLARATION", "symbols": [{"literal":"component"}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier), {"literal":"("}, "_", "FUNCTION_ARGUMENTS", "_", {"literal":")"}, "_", {"literal":"{"}, "STATEMENT", {"literal":"}"}]},
    {"name": "STATEMENT$subexpression$1$subexpression$1", "symbols": ["SWITCH"]},
    {"name": "STATEMENT$subexpression$1$subexpression$1", "symbols": ["FOR"]},
    {"name": "STATEMENT$subexpression$1$subexpression$1", "symbols": ["DO_WHILE"]},
    {"name": "STATEMENT$subexpression$1$subexpression$1", "symbols": ["WHILE"]},
    {"name": "STATEMENT$subexpression$1$subexpression$1", "symbols": ["IF"]},
    {"name": "STATEMENT$subexpression$1$subexpression$1", "symbols": ["CLAUSE"]},
    {"name": "STATEMENT$subexpression$1", "symbols": ["STATEMENT$subexpression$1$subexpression$1"], "postprocess":  (value) => {
        	return value[0];
        } },
    {"name": "STATEMENT$subexpression$1$subexpression$2$ebnf$1", "symbols": []},
    {"name": "STATEMENT$subexpression$1$subexpression$2$ebnf$1$subexpression$1", "symbols": ["_", "STATEMENT"]},
    {"name": "STATEMENT$subexpression$1$subexpression$2$ebnf$1", "symbols": ["STATEMENT$subexpression$1$subexpression$2$ebnf$1", "STATEMENT$subexpression$1$subexpression$2$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "STATEMENT$subexpression$1$subexpression$2", "symbols": [{"literal":"{"}, "STATEMENT$subexpression$1$subexpression$2$ebnf$1", "_", {"literal":"}"}]},
    {"name": "STATEMENT$subexpression$1", "symbols": ["STATEMENT$subexpression$1$subexpression$2"], "postprocess":  (args) => {
        	return args[0][1].map((value) => {
        		return value[1];
        	});
        } },
    {"name": "STATEMENT", "symbols": ["STATEMENT$subexpression$1"], "postprocess":  (value) => {
        	return {
        		type: 'statement',
        		value: value[0],
        	};
        } },
    {"name": "CONTROL_BLOCK", "symbols": ["STATEMENT"]},
    {"name": "CONTROL_BLOCK$subexpression$1$ebnf$1", "symbols": []},
    {"name": "CONTROL_BLOCK$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", "STATEMENT"]},
    {"name": "CONTROL_BLOCK$subexpression$1$ebnf$1", "symbols": ["CONTROL_BLOCK$subexpression$1$ebnf$1", "CONTROL_BLOCK$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "CONTROL_BLOCK$subexpression$1", "symbols": [{"literal":"{"}, "CONTROL_BLOCK$subexpression$1$ebnf$1", {"literal":"}"}]},
    {"name": "CONTROL_BLOCK", "symbols": ["CONTROL_BLOCK$subexpression$1"]},
    {"name": "CONTROL_CONDITION", "symbols": [{"literal":"("}, "_", "VALUE", "_", {"literal":")"}]},
    {"name": "IF$ebnf$1", "symbols": []},
    {"name": "IF$ebnf$1$subexpression$1", "symbols": ["_", {"literal":"else"}, "_", {"literal":"if"}, "CONTROL_CONDITION", "_", "CONTROL_BLOCK"]},
    {"name": "IF$ebnf$1", "symbols": ["IF$ebnf$1", "IF$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "IF$ebnf$2$subexpression$1", "symbols": ["_", {"literal":"else"}, "_", "CONTROL_BLOCK"]},
    {"name": "IF$ebnf$2", "symbols": ["IF$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "IF$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IF", "symbols": [{"literal":"if"}, "CONTROL_CONDITION", "_", "CONTROL_BLOCK", "IF$ebnf$1", "IF$ebnf$2"]},
    {"name": "SWITCH$ebnf$1", "symbols": []},
    {"name": "SWITCH$ebnf$1$subexpression$1$subexpression$1", "symbols": ["LITERAL"]},
    {"name": "SWITCH$ebnf$1$subexpression$1$subexpression$1", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "SWITCH$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "SWITCH$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", "CLAUSE"]},
    {"name": "SWITCH$ebnf$1$subexpression$1$ebnf$1", "symbols": ["SWITCH$ebnf$1$subexpression$1$ebnf$1", "SWITCH$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "SWITCH$ebnf$1$subexpression$1$ebnf$2$subexpression$1", "symbols": ["_", {"literal":"break"}, "_", "BREAK"]},
    {"name": "SWITCH$ebnf$1$subexpression$1$ebnf$2", "symbols": ["SWITCH$ebnf$1$subexpression$1$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "SWITCH$ebnf$1$subexpression$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "SWITCH$ebnf$1$subexpression$1", "symbols": ["_", {"literal":"case"}, "_", "SWITCH$ebnf$1$subexpression$1$subexpression$1", "_", {"literal":":"}, "SWITCH$ebnf$1$subexpression$1$ebnf$1", "SWITCH$ebnf$1$subexpression$1$ebnf$2"]},
    {"name": "SWITCH$ebnf$1", "symbols": ["SWITCH$ebnf$1", "SWITCH$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "SWITCH", "symbols": [{"literal":"switch"}, "CONTROL_CONDITION", "_", {"literal":"{"}, "SWITCH$ebnf$1", "_", {"literal":"}"}]},
    {"name": "FOR$subexpression$1$ebnf$1", "symbols": ["CLAUSE"], "postprocess": id},
    {"name": "FOR$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "FOR$subexpression$1$ebnf$2", "symbols": ["VALUE"], "postprocess": id},
    {"name": "FOR$subexpression$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "FOR$subexpression$1", "symbols": ["FOR$subexpression$1$ebnf$1", "_", "VALUE", "_", "BREAK", "_", "FOR$subexpression$1$ebnf$2"]},
    {"name": "FOR", "symbols": [{"literal":"for"}, {"literal":"("}, "FOR$subexpression$1"]},
    {"name": "FOR$subexpression$2", "symbols": ["TYPE", "_", "ASSIGNMENT_IDENTIFIER", "_", {"literal":":"}, "_", "VALUE"]},
    {"name": "FOR", "symbols": ["FOR$subexpression$2", {"literal":")"}, "_", "CONTROL_BLOCK"]},
    {"name": "WHILE", "symbols": [{"literal":"while"}, "CONTROL_CONDITION", "_", "CONTROL_BLOCK"]},
    {"name": "DO_WHILE", "symbols": [{"literal":"do"}, "_", "CONTROL_BLOCK", "_", {"literal":"while"}, "CONTROL_CONDITION"]},
    {"name": "CLAUSE$subexpression$1$subexpression$1", "symbols": ["VALUE"]},
    {"name": "CLAUSE$subexpression$1$subexpression$1", "symbols": ["VALUE_DECLARATION"]},
    {"name": "CLAUSE$subexpression$1$subexpression$1", "symbols": ["RETURN"]},
    {"name": "CLAUSE$subexpression$1", "symbols": ["CLAUSE$subexpression$1$subexpression$1", "_", "BREAK"]},
    {"name": "CLAUSE", "symbols": ["CLAUSE$subexpression$1"], "postprocess":  (args) => {
        	console.log(args[0][0]);
        	return {
        		type: 'clause',
        		value: args[0][0][0],
        	};
        }},
    {"name": "RETURN$subexpression$1", "symbols": [{"literal":"return"}, "_", "VALUE"]},
    {"name": "RETURN", "symbols": ["RETURN$subexpression$1"], "postprocess":  (args) => {
        	return {
        		type: 'return',
        		value: args[0][2],
        	};
        }},
    {"name": "DECLARATION_BLOCK$subexpression$1$subexpression$1", "symbols": ["ASSIGNMENT_IDENTIFIER"]},
    {"name": "DECLARATION_BLOCK$subexpression$1$subexpression$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "DECLARATION_BLOCK$subexpression$1$subexpression$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "DECLARATION_BLOCK$subexpression$1$subexpression$1$subexpression$1$ebnf$1", "symbols": ["DECLARATION_BLOCK$subexpression$1$subexpression$1$subexpression$1$ebnf$1", "DECLARATION_BLOCK$subexpression$1$subexpression$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "DECLARATION_BLOCK$subexpression$1$subexpression$1$subexpression$1", "symbols": [{"literal":"("}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier), "DECLARATION_BLOCK$subexpression$1$subexpression$1$subexpression$1$ebnf$1", "_", {"literal":")"}]},
    {"name": "DECLARATION_BLOCK$subexpression$1$subexpression$1", "symbols": ["DECLARATION_BLOCK$subexpression$1$subexpression$1$subexpression$1"], "postprocess":  (identifier) => {
        	return [identifier[0][2], ...identifier[0][3].map((v) => {
        		return v[3];
        	})];
        } },
    {"name": "DECLARATION_BLOCK$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", {"literal":"="}, "_", "VALUE"]},
    {"name": "DECLARATION_BLOCK$subexpression$1$ebnf$1", "symbols": ["DECLARATION_BLOCK$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "DECLARATION_BLOCK$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "DECLARATION_BLOCK$subexpression$1", "symbols": ["DECLARATION_BLOCK$subexpression$1$subexpression$1", "DECLARATION_BLOCK$subexpression$1$ebnf$1"]},
    {"name": "DECLARATION_BLOCK", "symbols": ["DECLARATION_BLOCK$subexpression$1"], "postprocess":  (args) => {
        	if(args[0][1]){
        		return {
        			type: 'declaration_block',
        			identifiers: args[0][0],
        			value: args[0][1][3],
        		};
        	}
        	return {
        		type: 'declaration_block',
        		identifiers: args[0][0],
        	};
        }},
    {"name": "VALUE_DECLARATION$subexpression$1$subexpression$1$ebnf$1", "symbols": [{"literal":"final"}], "postprocess": id},
    {"name": "VALUE_DECLARATION$subexpression$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "VALUE_DECLARATION$subexpression$1$subexpression$1", "symbols": ["VALUE_DECLARATION$subexpression$1$subexpression$1$ebnf$1", "_"]},
    {"name": "VALUE_DECLARATION$subexpression$1$ebnf$1", "symbols": []},
    {"name": "VALUE_DECLARATION$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "DECLARATION_BLOCK"]},
    {"name": "VALUE_DECLARATION$subexpression$1$ebnf$1", "symbols": ["VALUE_DECLARATION$subexpression$1$ebnf$1", "VALUE_DECLARATION$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "VALUE_DECLARATION$subexpression$1", "symbols": ["VALUE_DECLARATION$subexpression$1$subexpression$1", "TYPE", "_", "DECLARATION_BLOCK", "VALUE_DECLARATION$subexpression$1$ebnf$1"]},
    {"name": "VALUE_DECLARATION", "symbols": ["VALUE_DECLARATION$subexpression$1"], "postprocess":  (args) => {
        	return {
        		type: 'declaration',
        		declaration_type: args[0][1],
        		final: args[0][0][0] !== null,
        		blocks: [ args[0][3], ...args[0][4].map((block) => {
        			return block[3];
        		}) ]
        	};
        } },
    {"name": "VALUE$subexpression$1", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "VALUE$subexpression$1", "symbols": ["LITERAL"]},
    {"name": "VALUE$subexpression$1", "symbols": ["EXPRESSION"]},
    {"name": "VALUE$subexpression$1", "symbols": ["STRING_LITERAL"]},
    {"name": "VALUE$subexpression$1", "symbols": ["ARRAY_LITERAL"]},
    {"name": "VALUE$subexpression$1", "symbols": ["MAP_LITERAL"]},
    {"name": "VALUE$subexpression$1", "symbols": ["COMPONENT_LITERAL"]},
    {"name": "VALUE$subexpression$1", "symbols": ["FUNCTION_CALL"]},
    {"name": "VALUE$subexpression$1", "symbols": ["ASSIGNMENT"]},
    {"name": "VALUE$subexpression$1", "symbols": ["UNARY_ASSIGNMENT"]},
    {"name": "VALUE", "symbols": ["VALUE$subexpression$1"], "postprocess":  (args) => {
        	return args[0][0];
        }},
    {"name": "ARRAY_DESTRUCTURE_DEFAULT$ebnf$1$subexpression$1", "symbols": ["_", {"literal":"="}, "_", "VALUE"]},
    {"name": "ARRAY_DESTRUCTURE_DEFAULT$ebnf$1", "symbols": ["ARRAY_DESTRUCTURE_DEFAULT$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ARRAY_DESTRUCTURE_DEFAULT$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ARRAY_DESTRUCTURE_DEFAULT", "symbols": ["ASSIGNMENT_IDENTIFIER", "ARRAY_DESTRUCTURE_DEFAULT$ebnf$1"]},
    {"name": "ARRAY_DESTRUCTURE$subexpression$1", "symbols": ["_", {"literal":","}, "_", "ASSIGNMENT_IDENTIFIER"]},
    {"name": "ARRAY_DESTRUCTURE", "symbols": [{"literal":"["}, "_", "ASSIGNMENT_IDENTIFIER", "ARRAY_DESTRUCTURE$subexpression$1", "_", {"literal":"]"}]},
    {"name": "MAP_DESTRUCTURE_RENAME", "symbols": ["ASSIGNMENT_IDENTIFIER", "_", {"literal":":"}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "MAP_DESTRUCTURE_DEFAULT$subexpression$1", "symbols": ["_", {"literal":"="}, "VALUE"]},
    {"name": "MAP_DESTRUCTURE_DEFAULT", "symbols": ["MAP_DESTRUCTURE_RENAME", "MAP_DESTRUCTURE_DEFAULT$subexpression$1"]},
    {"name": "MAP_DESTRUCTURE$subexpression$1", "symbols": ["_", {"literal":","}, "_", "MAP_DESTRUCTURE_DEFAULT"]},
    {"name": "MAP_DESTRUCTURE", "symbols": [{"literal":"{"}, "_", "MAP_DESTRUCTURE_DEFAULT", "MAP_DESTRUCTURE$subexpression$1", "_", {"literal":"}"}]},
    {"name": "ASSIGNMENT_IDENTIFIER$subexpression$1", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "ASSIGNMENT_IDENTIFIER$subexpression$1", "symbols": ["ARRAY_DESTRUCTURE"]},
    {"name": "ASSIGNMENT_IDENTIFIER$subexpression$1", "symbols": ["MAP_DESTRUCTURE"]},
    {"name": "ASSIGNMENT_IDENTIFIER", "symbols": ["ASSIGNMENT_IDENTIFIER$subexpression$1"], "postprocess":  (args) => {
        	return args[0][0];
        } },
    {"name": "ASSIGNMENT", "symbols": ["DIRECT_ASSIGNMENT"]},
    {"name": "ASSIGNMENT", "symbols": ["MODIFIER_ASSIGNMENT"]},
    {"name": "ASSIGNMENT", "symbols": ["UNARY_ASSIGNMENT"]},
    {"name": "DIRECT_ASSIGNMENT", "symbols": ["ASSIGNMENT_IDENTIFIER"]},
    {"name": "DIRECT_ASSIGNMENT$subexpression$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "DIRECT_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"("}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier), "DIRECT_ASSIGNMENT$subexpression$1$subexpression$1", "_", {"literal":")"}]},
    {"name": "DIRECT_ASSIGNMENT", "symbols": ["DIRECT_ASSIGNMENT$subexpression$1", "_", {"literal":"="}, "_", "VALUE"]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"+="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"-="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"*="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"/="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"%="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"**="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"&="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"|="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"~="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"^="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"<<<="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":">>>="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"<<="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":">>="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"&&="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"||="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"<<="}]},
    {"name": "MODIFIER_ASSIGNMENT$subexpression$1", "symbols": [{"literal":">>="}]},
    {"name": "MODIFIER_ASSIGNMENT", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier), "_", "MODIFIER_ASSIGNMENT$subexpression$1", "_", "VALUE"]},
    {"name": "UNARY_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"++"}]},
    {"name": "UNARY_ASSIGNMENT$subexpression$1", "symbols": [{"literal":"--"}]},
    {"name": "UNARY_ASSIGNMENT", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier), "UNARY_ASSIGNMENT$subexpression$1"]},
    {"name": "FUNCTION_ARGUMENT$subexpression$1", "symbols": ["VALUE"]},
    {"name": "FUNCTION_ARGUMENT$subexpression$1$subexpression$1", "symbols": ["KEY_WORD", "_", {"literal":"="}, "_", "VALUE"]},
    {"name": "FUNCTION_ARGUMENT$subexpression$1", "symbols": ["FUNCTION_ARGUMENT$subexpression$1$subexpression$1"]},
    {"name": "FUNCTION_ARGUMENT$subexpression$1", "symbols": ["ARRAY_SPREAD"]},
    {"name": "FUNCTION_ARGUMENT$subexpression$1", "symbols": ["MAP_SPREAD"]},
    {"name": "FUNCTION_ARGUMENT", "symbols": ["FUNCTION_ARGUMENT$subexpression$1"], "postprocess":  (args) => {
        	return {
        		type: 'argument',
        		target: args[0][0],
        	};
        }},
    {"name": "FUNCTION_CALL$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "FUNCTION_CALL$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "FUNCTION_ARGUMENT"]},
    {"name": "FUNCTION_CALL$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["FUNCTION_CALL$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "FUNCTION_CALL$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "FUNCTION_CALL$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", "FUNCTION_ARGUMENT", "FUNCTION_CALL$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "FUNCTION_CALL$subexpression$1$ebnf$1", "symbols": ["FUNCTION_CALL$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "FUNCTION_CALL$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "FUNCTION_CALL$subexpression$1", "symbols": ["VALUE", {"literal":"("}, "FUNCTION_CALL$subexpression$1$ebnf$1", "_", {"literal":")"}]},
    {"name": "FUNCTION_CALL", "symbols": ["FUNCTION_CALL$subexpression$1"], "postprocess":  (args) => {
        	let arguments_obj = args[0][2];
        	let arguments = [ ...([arguments_obj[1]]??[]), ...arguments_obj[2].map((arg) => {
        		return arg[3];
        	})];
        	
        	return {
        		type: 'function_call',
        		target: args[0][0],
        		arguments,
        	};
        }},
    {"name": "EXPRESSION", "symbols": ["COMPARISON"]},
    {"name": "EXPRESSION", "symbols": ["BITWISE"]},
    {"name": "EXPRESSION", "symbols": ["BOOLEAN"]},
    {"name": "EXPRESSION", "symbols": ["SUM"]},
    {"name": "EXPRESSION", "symbols": ["PRODUCT"]},
    {"name": "EXPRESSION", "symbols": ["EXPONENT"]},
    {"name": "EXPRESSION", "symbols": ["UNARY"]},
    {"name": "EXPRESSION", "symbols": ["TERNARY"]},
    {"name": "TERNARY", "symbols": ["VALUE", "_", {"literal":"?"}, "_", "VALUE", "_", {"literal":":"}, "_", "VALUE"]},
    {"name": "COMPARISON$subexpression$1", "symbols": [{"literal":"!="}]},
    {"name": "COMPARISON$subexpression$1", "symbols": [{"literal":">="}]},
    {"name": "COMPARISON$subexpression$1", "symbols": [{"literal":"<="}]},
    {"name": "COMPARISON$subexpression$1", "symbols": [{"literal":">"}]},
    {"name": "COMPARISON$subexpression$1", "symbols": [{"literal":"<"}]},
    {"name": "COMPARISON$subexpression$1", "symbols": [{"literal":"=="}]},
    {"name": "COMPARISON", "symbols": ["VALUE", "_", "COMPARISON$subexpression$1", "_", "VALUE"]},
    {"name": "BITWISE$subexpression$1", "symbols": [{"literal":"&"}]},
    {"name": "BITWISE$subexpression$1", "symbols": [{"literal":"|"}]},
    {"name": "BITWISE$subexpression$1", "symbols": [{"literal":"^"}]},
    {"name": "BITWISE$subexpression$1", "symbols": [{"literal":"<<<"}]},
    {"name": "BITWISE$subexpression$1", "symbols": [{"literal":">>>"}]},
    {"name": "BITWISE$subexpression$1", "symbols": [{"literal":"<<"}]},
    {"name": "BITWISE$subexpression$1", "symbols": [{"literal":">>"}]},
    {"name": "BITWISE", "symbols": ["VALUE", "_", "BITWISE$subexpression$1", "_", "VALUE"]},
    {"name": "BOOLEAN$subexpression$1", "symbols": [{"literal":"&&"}]},
    {"name": "BOOLEAN$subexpression$1", "symbols": [{"literal":"||"}]},
    {"name": "BOOLEAN", "symbols": ["VALUE", "_", "BOOLEAN$subexpression$1", "_", "VALUE"]},
    {"name": "SUM$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "SUM$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "SUM", "symbols": ["VALUE", "_", "SUM$subexpression$1", "_", "VALUE"]},
    {"name": "PRODUCT$subexpression$1", "symbols": [{"literal":"*"}]},
    {"name": "PRODUCT$subexpression$1", "symbols": [{"literal":"/"}]},
    {"name": "PRODUCT$subexpression$1", "symbols": [{"literal":"%"}]},
    {"name": "PRODUCT", "symbols": ["VALUE", "_", "PRODUCT$subexpression$1", "_", "VALUE"]},
    {"name": "EXPONENT", "symbols": ["VALUE", "_", {"literal":"**"}, "_", "VALUE"]},
    {"name": "UNARY", "symbols": [{"literal":"("}, "_", "VALUE", "_", {"literal":")"}]},
    {"name": "UNARY$subexpression$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "UNARY$subexpression$1$subexpression$1", "symbols": [{"literal":"!"}]},
    {"name": "UNARY$subexpression$1$subexpression$1", "symbols": [{"literal":"~"}]},
    {"name": "UNARY$subexpression$1", "symbols": ["UNARY$subexpression$1$subexpression$1", "VALUE"]},
    {"name": "UNARY", "symbols": ["UNARY$subexpression$1"]},
    {"name": "STRING_LITERAL$subexpression$1", "symbols": [(lexer.has("str_content") ? {type: "str_content"} : str_content)]},
    {"name": "STRING_LITERAL$subexpression$1", "symbols": [(lexer.has("escape") ? {type: "escape"} : escape)]},
    {"name": "STRING_LITERAL$subexpression$1$subexpression$1", "symbols": [(lexer.has("interp") ? {type: "interp"} : interp), "VALUE", {"literal":"}"}]},
    {"name": "STRING_LITERAL$subexpression$1", "symbols": ["STRING_LITERAL$subexpression$1$subexpression$1"]},
    {"name": "STRING_LITERAL", "symbols": [{"literal":"${"}, "STRING_LITERAL$subexpression$1", (lexer.has("lit_str_end") ? {type: "lit_str_end"} : lit_str_end)]},
    {"name": "ARRAY_SPREAD$subexpression$1", "symbols": ["ARRAY_LITERAL"]},
    {"name": "ARRAY_SPREAD$subexpression$1", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "ARRAY_SPREAD", "symbols": [{"literal":"..."}, "ARRAY_SPREAD$subexpression$1"]},
    {"name": "ARRAY_COMPONENT", "symbols": ["ARRAY_SPREAD"]},
    {"name": "ARRAY_COMPONENT", "symbols": ["VALUE"]},
    {"name": "ARRAY_LITERAL$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "ARRAY_LITERAL$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "ARRAY_COMPONENT"]},
    {"name": "ARRAY_LITERAL$ebnf$1$subexpression$1$ebnf$1", "symbols": ["ARRAY_LITERAL$ebnf$1$subexpression$1$ebnf$1", "ARRAY_LITERAL$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ARRAY_LITERAL$ebnf$1$subexpression$1", "symbols": ["_", "ARRAY_COMPONENT", "ARRAY_LITERAL$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "ARRAY_LITERAL$ebnf$1", "symbols": ["ARRAY_LITERAL$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ARRAY_LITERAL$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ARRAY_LITERAL", "symbols": [{"literal":"["}, "ARRAY_LITERAL$ebnf$1", "_", {"literal":"]"}]},
    {"name": "MAP_SPREAD$subexpression$1", "symbols": ["ARRAY_LITERAL"]},
    {"name": "MAP_SPREAD$subexpression$1", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "MAP_SPREAD", "symbols": [{"literal":"..."}, "MAP_SPREAD$subexpression$1"]},
    {"name": "MAP_COMPONENT", "symbols": ["MAP_SPREAD"]},
    {"name": "MAP_COMPONENT$subexpression$1", "symbols": ["KEY_WORD", "_", {"literal":":"}, "_", "VALUE"]},
    {"name": "MAP_COMPONENT", "symbols": ["MAP_COMPONENT$subexpression$1"]},
    {"name": "MAP_LITERAL$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "MAP_LITERAL$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "MAP_COMPONENT"]},
    {"name": "MAP_LITERAL$ebnf$1$subexpression$1$ebnf$1", "symbols": ["MAP_LITERAL$ebnf$1$subexpression$1$ebnf$1", "MAP_LITERAL$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "MAP_LITERAL$ebnf$1$subexpression$1", "symbols": ["_", "MAP_COMPONENT", "MAP_LITERAL$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "MAP_LITERAL$ebnf$1", "symbols": ["MAP_LITERAL$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "MAP_LITERAL$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "MAP_LITERAL", "symbols": [{"literal":"{"}, "MAP_LITERAL$ebnf$1", "_", {"literal":"}"}]},
    {"name": "COMPONENT_LITERAL$ebnf$1", "symbols": []},
    {"name": "COMPONENT_LITERAL$ebnf$1$subexpression$1", "symbols": ["_", (lexer.has("identifier") ? {type: "identifier"} : identifier), {"literal":"="}, "VALUE"]},
    {"name": "COMPONENT_LITERAL$ebnf$1", "symbols": ["COMPONENT_LITERAL$ebnf$1", "COMPONENT_LITERAL$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "COMPONENT_LITERAL$subexpression$1", "symbols": [{"literal":"/>"}]},
    {"name": "COMPONENT_LITERAL$subexpression$1$subexpression$1", "symbols": [{"literal":">"}, "_", "VALUE", "_", {"literal":"</>"}]},
    {"name": "COMPONENT_LITERAL$subexpression$1", "symbols": ["COMPONENT_LITERAL$subexpression$1$subexpression$1"]},
    {"name": "COMPONENT_LITERAL", "symbols": [{"literal":"<"}, (lexer.has("identifier") ? {type: "identifier"} : identifier), "COMPONENT_LITERAL$ebnf$1", "COMPONENT_LITERAL$subexpression$1"]},
    {"name": "LITERAL$subexpression$1", "symbols": [(lexer.has("int") ? {type: "int"} : int)]},
    {"name": "LITERAL$subexpression$1", "symbols": [(lexer.has("float") ? {type: "float"} : float)]},
    {"name": "LITERAL$subexpression$1", "symbols": [(lexer.has("hex") ? {type: "hex"} : hex)]},
    {"name": "LITERAL$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "LITERAL$subexpression$1", "symbols": [(lexer.has("null") ? {type: "null"} : null)]},
    {"name": "LITERAL", "symbols": ["LITERAL$subexpression$1"], "postprocess":  ([[{ type, value, line, col}]]) => {
        	return {
        		type: 'literal',
        		literal_type: type,
        		value,
        		line,
        		col,
        	}
        } },
    {"name": "KEY_WORD", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "KEY_WORD$subexpression$1", "symbols": [{"literal":"["}, "_", (lexer.has("identifier") ? {type: "identifier"} : identifier), "_", {"literal":"]"}]},
    {"name": "KEY_WORD", "symbols": ["KEY_WORD$subexpression$1"]},
    {"name": "TYPE$subexpression$1", "symbols": [(lexer.has("type") ? {type: "type"} : type)]},
    {"name": "TYPE$subexpression$1", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "TYPE$ebnf$1", "symbols": ["GENERIC"], "postprocess": id},
    {"name": "TYPE$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "TYPE", "symbols": ["TYPE$subexpression$1", "TYPE$ebnf$1"], "postprocess":  (args) => {
        	if(args[1]){
        		return {
        			type: 'type',
        			value: args[0],
        			generic: args[1],
        		};
        	}
        	return {
        		type: 'type',
        		value: args[0],
        	};
        }},
    {"name": "TYPE_DECLARATION$ebnf$1", "symbols": ["GENERIC_DECLARATION"], "postprocess": id},
    {"name": "TYPE_DECLARATION$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "TYPE_DECLARATION", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier), "TYPE_DECLARATION$ebnf$1"]},
    {"name": "GENERIC$ebnf$1", "symbols": ["TYPE"], "postprocess": id},
    {"name": "GENERIC$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "GENERIC$ebnf$2", "symbols": []},
    {"name": "GENERIC$ebnf$2$subexpression$1", "symbols": ["_", {"literal":","}, "_", "TYPE"]},
    {"name": "GENERIC$ebnf$2", "symbols": ["GENERIC$ebnf$2", "GENERIC$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "GENERIC", "symbols": [{"literal":"<"}, "_", "GENERIC$ebnf$1", "GENERIC$ebnf$2", "_", {"literal":">"}]},
    {"name": "GENERIC_DECLARATION$ebnf$1$subexpression$1", "symbols": ["TYPE", "_", (lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "GENERIC_DECLARATION$ebnf$1", "symbols": ["GENERIC_DECLARATION$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "GENERIC_DECLARATION$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "GENERIC_DECLARATION$ebnf$2", "symbols": []},
    {"name": "GENERIC_DECLARATION$ebnf$2$subexpression$1$subexpression$1", "symbols": ["TYPE", "_", (lexer.has("identifier") ? {type: "identifier"} : identifier)]},
    {"name": "GENERIC_DECLARATION$ebnf$2$subexpression$1", "symbols": ["_", {"literal":","}, "_", "GENERIC_DECLARATION$ebnf$2$subexpression$1$subexpression$1"]},
    {"name": "GENERIC_DECLARATION$ebnf$2", "symbols": ["GENERIC_DECLARATION$ebnf$2", "GENERIC_DECLARATION$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "GENERIC_DECLARATION", "symbols": [{"literal":"<"}, "_", "GENERIC_DECLARATION$ebnf$1", "GENERIC_DECLARATION$ebnf$2", "_", {"literal":">"}]},
    {"name": "BREAK", "symbols": [{"literal":";"}], "postprocess": () => {}},
    {"name": "_$ebnf$1", "symbols": [(lexer.has("whitespace") ? {type: "whitespace"} : whitespace)], "postprocess": id},
    {"name": "_$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": () => {}}
]
  , ParserStart: "ROOT"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
