import { effect } from 'effects'
import map, { get, set } from 'map'
import { print } from 'console'
import { to_bytes, from_bytes } from 'strings'
import { subsection } from 'arrays'
import { boolean, string, byte } from 'primitives'

let sys_call_event = () => {
	let file_read_event = effect(byte[], byte[])
	let file_write_event = effect(byte[], byte[])

	return effect(byte[], byte[], ([call, data]) => {
		switch(call){
			case 0x03:
				use with file_read_event(data)
		}
	}, (context) => {
		let files = map(string, string)()

		try {
			context()
		}
		handle file_read_event(data) {
			let file_name = from_bytes(data)
			use to_bytes(get(files, file))
		}
		handle file_write_event(data) {
			let file_name = from_bytes(subsection(data, 1, data[0] + 1))
			let data = from_bytes(subsection(data, data[0] + 1, data.length))
			files = set(files, file_name)
			use [0x01]
		}
	})	
}

let file_read = {
	boolean success
	string data?
}

let file_write = {
	string file
	string data
}
let read_event = effect(string, file_read, (file_name) => {
	byte[] read = with sys_call_event([ 0x03, ...to_bytes(file_name)])
	string data? = from_bytes(read)
	use file_read(data == null, data)
})
let write_event = effect(file_write, boolean, ({
	file,
	data,
}) => {
	let name_bytes = to_bytes(file)
	let data_bytes = to_bytes(data)

	byte[] write = with sys_call_event([ 0x04, name_bytes.length, ...name_bytes, ...data_bytes])
	use write[0] == 0x01
})

let read = (file) => {
	return with read_event(file)
}

let write = (file, data) => {
	return with write_event(file, data)
}

read('file') >>= ({ data, success }) => {
	print(data, success)
}
write('file', 'some data here') >>= ({ success }) => {
	print(success)
}
read('file') >>= ({ data, success }) => {
	print(data, success)
}
